AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for stemma-app


Globals:
  Function:
    Runtime: java11
    Timeout: 20
    MemorySize: 512
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
    Layers:
      - !Ref MyLayer


Parameters:
  hostedZoneId:
    Description: ""
    Type: String
    Default: "Z0371539135CFRSV7N3PQ"
  cloudFrontAlias:
    Description: ""
    Type: String
    Default: "web.stemma.link"
  apiAlias:
    Description: ""
    Type: String
    Default: "api.stemma.link"
  certificateArnUsEast1:
    Description: ""
    Type: String
    Default: "arn:aws:acm:us-east-1:537602986733:certificate/447c1e43-350a-40cf-b971-f6e8a8287982"
  certificateArnEurope:
    Description: ""
    Type: String
    Default: "arn:aws:acm:us-east-1:537602986733:certificate/447c1e43-350a-40cf-b971-f6e8a8287982"


Resources:
  assetsDnsRecord:
    DependsOn:  WebAppCDN
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${cloudFrontAlias}"
      Type: A
      HostedZoneId: !Sub "${hostedZoneId}"
      AliasTarget:
        HostedZoneId: "Z2FDTNDATAQYW2" #this hardcoded value is always the case https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
        DNSName: !GetAtt WebAppCDN.DomainName
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${cloudFrontAlias}'
  WebAppCDN:
    DependsOn: appbucket
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "${cloudFrontAlias}"
        ViewerCertificate:
          AcmCertificateArn: !Sub "${certificateArnUsEast1}"
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        PriceClass: "PriceClass_100"
        Enabled: 'true'
        HttpVersion: "http2"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: appbucket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt appbucket.DomainName
            Id: "appbucket"
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref CloudFrontOriginAccessIdentity
  appbucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref appbucket
                - /*
      Bucket: !Ref appbucket
  #  autosetloggroupretention:
  #    Type: AWS::Serverless::Application
  #    Properties:
  #      Location:
  #        ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-set-log-group-retention
  #        SemanticVersion: 1.5.0
  #      Parameters:
  #       RetentionDays: 3
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Sub "${apiAlias}"
        CertificateArn: !Sub "${certificateArnEurope}"
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Sub "${hostedZoneId}"
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{
        $context.requestId ; $context.authorizer.error ; $context.error.message ; $context.integration.error ; $context.integrationErrorMessage ; $context.integration.integrationStatus
        "requestId":"$context.requestId", 
        "ip": "$context.identity.sourceIp",
         "caller":"$context.identity.caller",
          "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength" 
          }'
      StageName: dev
  MyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - java11
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: io.github.salamahin.stemma.apis.serverless.aws.HelloWorld::helloWorldRequest
      Events:
        AdminExhibition:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApi
            Path: /hello-world
            Method: get

Outputs:
  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev"

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for stemma-app


Globals:
  Function:
    Runtime: java11
    Timeout: 20
    MemorySize: 512
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        JDBC_URL: "{{resolve:secretsmanager:prod/jdbc:SecretString:JDBC_URL}}"
        JDBC_USER: "{{resolve:secretsmanager:prod/jdbc:SecretString:JDBC_USER}}"
        JDBC_PASSWORD: "{{resolve:secretsmanager:prod/jdbc:SecretString:JDBC_PASSWORD}}"
        JDBC_CERT: "{{resolve:secretsmanager:prod/jdbc:SecretString:JDBC_CERT}}"
        INVITE_SECRET: "{{resolve:secretsmanager:prod/invite:SecretString:INVITE_SECRET}}"
    Layers:
      - !Ref MyLayer


Parameters:
  hostedZoneId:
    Description: ""
    Type: String
    Default: "Z0371539135CFRSV7N3PQ"
  cloudFrontAlias:
    Description: ""
    Type: String
    Default: "stemma.link"
  apiAlias:
    Description: ""
    Type: String
    Default: "api.stemma.link"
  certificateArnUsEast1:
    Description: ""
    Type: String
    Default: "arn:aws:acm:us-east-1:537602986733:certificate/447c1e43-350a-40cf-b971-f6e8a8287982"
  certificateArnEurope:
    Description: ""
    Type: String
    Default: "arn:aws:acm:eu-central-1:537602986733:certificate/6d7733eb-fff5-4c6e-b06d-01868a79e108"
  googleAuthClientId:
    Description: ""
    Type: String
    Default: "584519661541-m7jkpf0o4cu08jpiq4eo4bmaoa6ah7j1.apps.googleusercontent.com"

Resources:
  assetsDnsRecord:
    DependsOn: WebAppCDN
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub "${cloudFrontAlias}"
      Type: A
      HostedZoneId: !Sub "${hostedZoneId}"
      AliasTarget:
        HostedZoneId: "Z2FDTNDATAQYW2" #this hardcoded value is always the case https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
        DNSName: !GetAtt WebAppCDN.DomainName
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${cloudFrontAlias}'
  WebAppCDN:
    DependsOn: appbucket
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "${cloudFrontAlias}"
        ViewerCertificate:
          AcmCertificateArn: !Sub "${certificateArnUsEast1}"
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        PriceClass: "PriceClass_100"
        Enabled: 'true'
        HttpVersion: "http2"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: appbucket
          Compress: true
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" #managed Managed-CachingOptimized cache policy
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt appbucket.RegionalDomainName
            Id: "appbucket"
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref CloudFrontOriginAccessIdentity
  appbucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref appbucket
                - /*
      Bucket: !Ref appbucket
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
  MyApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: "https://accounts.google.com"
              audience:
                - !Sub "${googleAuthClientId}"
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuth2Authorizer
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
        MaxAge: 600
      Domain:
        DomainName: !Sub "${apiAlias}"
        CertificateArn: !Sub "${certificateArnEurope}"
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Sub "${hostedZoneId}"
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{
        $context.requestId ; $context.authorizer.error ; $context.error.message ; $context.integration.error ; $context.integrationErrorMessage ; $context.integration.integrationStatus
        "requestId":"$context.requestId", 
        "ip": "$context.identity.sourceIp",
         "caller":"$context.identity.caller",
          "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength" 
          }'
      StageName: dev
  MyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: .
      CompatibleRuntimes:
        - java11
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  StemmaFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: io.github.salamahin.stemma.apis.serverless.aws.StemmaLambda::apply
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApi
            Path: /stemma
            Method: post
      Policies:
        - S3FullAccessPolicy:
            BucketName: stemma-app-backend-assets
  LoginInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: google_auth/
      Handler: initiate_login.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApi
            Auth:
              Authorizer: NONE
            Path: /oauth2/login
            Method: get
  ExchangeCodeWithToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: google_auth/
      Handler: exchange_code_with_token.lambda_handler
      Runtime: python3.8
      Architectures:
        - x86_64
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApi
            Auth:
              Authorizer: NONE
            Path: /oauth2/idpresponse
            Method: GET

Outputs:
  LoginUrl:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${apiAlias}/oauth2/login"
  HtmlAssetsBucketRegionalName:
    Description: "Name of the bucket where html assets are stored"
    Value: !Ref appbucket
  CloudFormationId:
    Description: "Cloudformation id"
    Value: !GetAtt WebAppCDN.Id